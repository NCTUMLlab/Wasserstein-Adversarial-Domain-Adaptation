from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
from matplotlib.pyplot import cm
from matplotlib.ticker import NullFormatter
import numpy as np
import scipy.io as scio
import os
import torch


def save_matlab(data, label, save_path):
    # data contains t-SNE reduced 2-Dimension or 3-Dimension matrix, label is either "class" or "domain"
    print("save to matlab file")
    scio.savemat(save_path, {"x": np.transpose(
        data[:, 0], axes=0), "y": np.transpose(data[:, 1], axes=0), "label": np.transpose(label, axes=0)})
    print("mat file saved")


def visualize_2d(save_path, embedding, label, domain, class_num):

    save_matlab(embedding, domain, os.path.join(
        save_path, "TSNE_Domain_2D.mat"))

    save_matlab(embedding, label, os.path.join(
        save_path, "TSNE_Label_2D.mat"))

    fig = plt.figure()
    ax = fig.add_subplot(111)
    colors = cm.rainbow(np.linspace(0.0, 1.0, class_num))

    xx = embedding[:, 0]
    yy = embedding[:, 1]

    for i in range(class_num):
        ax.scatter(xx[label == i], yy[label == i],
                   color=colors[i], s=10)

    '''
    for i in range(embedding.shape[0]):
        plt.text(xx[i], yy[i], str(label[i]), fontdict={"size": 10})
    '''

    ax.xaxis.set_major_formatter(NullFormatter())
    ax.yaxis.set_major_formatter(NullFormatter())
    plt.axis('tight')
    plt.legend(loc='best', scatterpoints=1, fontsize=5)
    plt.savefig(os.path.join(save_path, "TSNE_Label_2D.pdf"),
                format='pdf', dpi=600)
    plt.show()
    plt.close()

    fig = plt.figure()
    ax = fig.add_subplot(111)
    colors = cm.rainbow(np.linspace(0.0, 1.0, class_num))

    for i in range(2):
        ax.scatter(xx[domain == i], yy[domain == i], color=cm.bwr(i/1.), s=10)

    '''
    for i in range(embedding.shape[0]):
        plt.text(xx[i], yy[i], str(int(domain[i])), fontdict={
                 "size": 10}, color=cm.bwr(domain[i]/1.))
    '''

    ax.xaxis.set_major_formatter(NullFormatter())
    ax.yaxis.set_major_formatter(NullFormatter())
    plt.axis('tight')
    plt.legend(loc='best', scatterpoints=1, fontsize=5)
    plt.savefig(os.path.join(save_path, "TSNE_Domain_2D.pdf"),
                format='pdf', dpi=600)
    plt.show()
    plt.close()


def visualize_3d(save_path, embedding, label, domain, class_num):

    save_matlab(embedding, domain, os.path.join(
        save_path, "TSNE_Domain_3D.mat"))

    save_matlab(embedding, label, os.path.join(
        save_path, "TSNE_Label_3D.mat"))

    fig = plt.figure()
    ax = fig.add_subplot(111, projection="3d")
    colors = cm.rainbow(np.linspace(0.0, 1.0, class_num))

    xx = embedding[:, 0]
    yy = embedding[:, 1]
    zz = embedding[:, 2]

    for i in range(class_num):
        ax.scatter(xx[label == i], yy[label == i],
                   zz[label == i], color=colors[i], s=10)

    ax.xaxis.set_major_formatter(NullFormatter())
    ax.yaxis.set_major_formatter(NullFormatter())
    ax.zaxis.set_major_formatter(NullFormatter())
    plt.axis('tight')
    plt.legend(loc='best', scatterpoints=1, fontsize=5)
    plt.savefig(os.path.join(save_path, "TSNE_Label_3D.pdf"),
                format='pdf', dpi=600)
    plt.show()
    plt.close()

    fig = plt.figure()
    ax = fig.add_subplot(111, projection="3d")

    for i in range(2):
        ax.scatter(xx[domain == i], yy[domain == i],
                   zz[domain == i], color=cm.bwr(i/1.), s=10)

    ax.xaxis.set_major_formatter(NullFormatter())
    ax.yaxis.set_major_formatter(NullFormatter())
    ax.zaxis.set_major_formatter(NullFormatter())
    plt.axis('tight')
    plt.legend(loc='best', scatterpoints=1, fontsize=5)
    plt.savefig(os.path.join(save_path, "TSNE_Domain_3D.pdf"),
                format='pdf', dpi=600)
    plt.show()
    plt.close()


# sliced wasserstein computation use
def get_theta(embedding_dim, num_samples=50):
    theta = [w/np.sqrt((w**2).sum())
             for w in np.random.normal(size=(num_samples, embedding_dim))]
    theta = np.asarray(theta)
    return torch.from_numpy(theta).type(torch.FloatTensor).cuda()


def sliced_wasserstein_distance(source_z, target_z, num_projections=50, p=2):
    # theta is vector represents the projection directoin
    batch_size = target_z.size(0)
    theta = get_theta(64*9*9, num_projections)
    proj_target = target_z.matmul(theta.transpose(0, 1))
    proj_source = source_z.matmul(theta.transpose(0, 1))
    w_distance = torch.sort(proj_target.transpose(0, 1), dim=1)[
        0]-torch.sort(proj_source.transpose(0, 1), dim=1)[0]

    # calculate by the definition of p-Wasserstein distance
    w_distance_p = torch.pow(w_distance, p)

    return w_distance_p.mean()

"""
# matlab code for plot .mat format file

% You need to put t-sne .mat files generated by WADA.py under the same path with this matlab
% script first


% color t-sne embeddings accroding to domain 
tsne_domain = load(".//TSNE_domain_2D.mat")
x = tsne_domain.x
y = tsne_domain.y
label = tsne_domain.label
domain_fig = scatter(x,y,20,label, "filled")
axis off
saveas(domain_fig, "TSNE_domain_2D", "png")

% color t-sne embeddings accroding to label
tsne_label = load(".//TSNE_label_2D.mat")
x = tsne_label.x
y = tsne_label.y
label = tsne_label.label
label_fig = scatter(x,y,20,label, "filled")
axis off
saveas(label_fig, "TSNE_label_2D", "png")
"""
